
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/client.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}




  const path = require('path')

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  providerSub: 'providerSub',
  email: 'email',
  role: 'role',
  refreshToken: 'refreshToken',
  createdAt: 'createdAt'
};

exports.Prisma.YoutubeVideoScalarFieldEnum = {
  id: 'id',
  title: 'title',
  channelId: 'channelId',
  channelTitle: 'channelTitle',
  thumbnailUrl: 'thumbnailUrl',
  transcript: 'transcript',
  transcriptMetadata: 'transcriptMetadata',
  transcriptSummary: 'transcriptSummary',
  publishedAt: 'publishedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FactCheckSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contentType: 'contentType',
  contentId: 'contentId',
  createdAt: 'createdAt'
};

exports.Prisma.ClaimScalarFieldEnum = {
  id: 'id',
  factCheckSessionId: 'factCheckSessionId',
  index: 'index',
  content: 'content',
  context: 'context',
  detectionReason: 'detectionReason',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ClaimVerificationScalarFieldEnum = {
  id: 'id',
  factCheckSessionId: 'factCheckSessionId',
  claimId: 'claimId',
  verdict: 'verdict',
  verdictReason: 'verdictReason',
  evidences: 'evidences',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.OauthProviderType = exports.$Enums.OauthProviderType = {
  GOOGLE: 'GOOGLE'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.ContentType = exports.$Enums.ContentType = {
  YOUTUBE_VIDEO: 'YOUTUBE_VIDEO'
};

exports.VerdictType = exports.$Enums.VerdictType = {
  TRUE: 'TRUE',
  MOSTLY_TRUE: 'MOSTLY_TRUE',
  MIXED: 'MIXED',
  MOSTLY_FALSE: 'MOSTLY_FALSE',
  FALSE: 'FALSE',
  UNKNOWN: 'UNKNOWN'
};

exports.Prisma.ModelName = {
  User: 'User',
  YoutubeVideo: 'YoutubeVideo',
  FactCheckSession: 'FactCheckSession',
  Claim: 'Claim',
  ClaimVerification: 'ClaimVerification'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/lwd432/projects/anti-fake/src/generated/prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "client"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [
      "driverAdapters",
      "queryCompiler"
    ],
    "sourceFilePath": "/Users/lwd432/projects/anti-fake/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../../.env"
  },
  "relativePath": "../../../../prisma",
  "clientVersion": "6.15.0",
  "engineVersion": "85179d7826409ee107a6ba334b5e305ae3fba9fb",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"queryCompiler\", \"driverAdapters\"]\n  output          = \"../src/generated/prisma/client\"\n  // binaryTargets = [\"native\", \"rhel-openssl-3.0.x\"] // vercel node runtime\n}\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n\nmodel User {\n  id           String            @id @default(uuid())\n  provider     OauthProviderType\n  providerSub  String?\n  email        String            @unique\n  role         UserRole          @default(USER)\n  refreshToken String?\n  createdAt    DateTime          @default(now())\n\n  factCheckSessions FactCheckSession[]\n\n  @@unique([provider, providerSub])\n}\n\nenum OauthProviderType {\n  GOOGLE\n}\n\nenum UserRole {\n  USER\n  ADMIN\n\n  @@map(\"Role\")\n}\n\nmodel YoutubeVideo {\n  id                 String   @id // youtube video id\n  title              String\n  channelId          String   @unique\n  channelTitle       String\n  thumbnailUrl       String\n  transcript         String?\n  transcriptMetadata Json?\n  transcriptSummary  String?\n  publishedAt        DateTime\n  updatedAt          DateTime @updatedAt\n}\n\nenum ContentType {\n  YOUTUBE_VIDEO\n}\n\nmodel FactCheckSession {\n  id          String      @id @default(uuid())\n  userId      String\n  user        User        @relation(fields: [userId], references: [id])\n  contentType ContentType\n  contentId   String\n\n  claimVerifications ClaimVerification[]\n  claims             Claim[]\n  createdAt          DateTime            @default(now())\n\n  @@unique([contentType, contentId])\n}\n\nmodel Claim {\n  id                 String           @id @default(uuid())\n  factCheckSessionId String\n  faactCheckSession  FactCheckSession @relation(fields: [factCheckSessionId], references: [id], onDelete: Cascade)\n  index              Int\n  content            String\n  context            String\n  detectionReason    String\n  metadata           Json?\n  createdAt          DateTime         @default(now())\n\n  claimVerifications ClaimVerification[]\n}\n\nmodel ClaimVerification {\n  id                 String           @id @default(uuid())\n  factCheckSessionId String\n  factCheckSession   FactCheckSession @relation(fields: [factCheckSessionId], references: [id], onDelete: Cascade)\n  claimId            String\n  claim              Claim            @relation(fields: [claimId], references: [id])\n  verdict            VerdictType\n  verdictReason      String\n  evidences          Json\n  createdAt          DateTime         @default(now())\n}\n\nenum VerdictType {\n  TRUE\n  MOSTLY_TRUE\n  MIXED\n  MOSTLY_FALSE\n  FALSE\n  UNKNOWN\n}\n",
  "inlineSchemaHash": "f441b00aab7d96060ca70c53aa138425d3f3329b475c71e0465c8e28e3560d3b",
  "copyEngine": true
}

const fs = require('fs')

config.dirname = __dirname
if (!fs.existsSync(path.join(__dirname, 'schema.prisma'))) {
  const alternativePaths = [
    "src/generated/prisma/client",
    "generated/prisma/client",
  ]
  
  const alternativePath = alternativePaths.find((altPath) => {
    return fs.existsSync(path.join(process.cwd(), altPath, 'schema.prisma'))
  }) ?? alternativePaths[0]

  config.dirname = path.join(process.cwd(), alternativePath)
  config.isBundled = true
}

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"enum\",\"type\":\"OauthProviderType\"},{\"name\":\"providerSub\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"factCheckSessions\",\"kind\":\"object\",\"type\":\"FactCheckSession\",\"relationName\":\"FactCheckSessionToUser\"}],\"dbName\":null},\"YoutubeVideo\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"channelId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"channelTitle\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"thumbnailUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transcript\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transcriptMetadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"transcriptSummary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"publishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"FactCheckSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"FactCheckSessionToUser\"},{\"name\":\"contentType\",\"kind\":\"enum\",\"type\":\"ContentType\"},{\"name\":\"contentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"claimVerifications\",\"kind\":\"object\",\"type\":\"ClaimVerification\",\"relationName\":\"ClaimVerificationToFactCheckSession\"},{\"name\":\"claims\",\"kind\":\"object\",\"type\":\"Claim\",\"relationName\":\"ClaimToFactCheckSession\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Claim\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"factCheckSessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"faactCheckSession\",\"kind\":\"object\",\"type\":\"FactCheckSession\",\"relationName\":\"ClaimToFactCheckSession\"},{\"name\":\"index\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"context\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"detectionReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"claimVerifications\",\"kind\":\"object\",\"type\":\"ClaimVerification\",\"relationName\":\"ClaimToClaimVerification\"}],\"dbName\":null},\"ClaimVerification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"factCheckSessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"factCheckSession\",\"kind\":\"object\",\"type\":\"FactCheckSession\",\"relationName\":\"ClaimVerificationToFactCheckSession\"},{\"name\":\"claimId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"claim\",\"kind\":\"object\",\"type\":\"Claim\",\"relationName\":\"ClaimToClaimVerification\"},{\"name\":\"verdict\",\"kind\":\"enum\",\"type\":\"VerdictType\"},{\"name\":\"verdictReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"evidences\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = undefined
config.compilerWasm = {
      getRuntime: async () => require('./query_compiler_bg.js'),
      getQueryCompilerWasmModule: async () => {
        const queryCompilerWasmFilePath = require('path').join(config.dirname, 'query_compiler_bg.wasm')
        const queryCompilerWasmFileBytes = require('fs').readFileSync(queryCompilerWasmFilePath)

        return new WebAssembly.Module(queryCompilerWasmFileBytes)
      }
    }


const { warnEnvConflicts } = require('./runtime/client.js')

warnEnvConflicts({
    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),
    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)
})

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

// file annotations for bundling tools to include these files
path.join(__dirname, "schema.prisma");
path.join(process.cwd(), "src/generated/prisma/client/schema.prisma")
